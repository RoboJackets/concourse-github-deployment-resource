#!/usr/bin/env python3

"""
Calls the GitHub API to create or update a deployment
"""
import logging
from json import dumps, load, loads
from os import getenv, listdir, path
from sys import argv, stderr, stdin

from jsonschema import validate  # type: ignore

from requests import get, post

assert len(argv) == 2

input_directory = argv[1]

assert path.exists(input_directory)
assert path.isdir(input_directory)

concourse_input = loads(stdin.read())

with open(
    file=path.join(path.dirname(path.realpath(__file__)), "..", "schema", "input.json"), mode="r", encoding="utf-8"
) as schema:
    validate(instance=concourse_input, schema=load(schema))

if "debug" in concourse_input["source"]:
    assert concourse_input["source"]["debug"] is True

    handler = logging.StreamHandler(stderr)
    handler.setLevel(logging.DEBUG)

    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    logger.addHandler(handler)

    logger.debug("Debug logging enabled")

remote = concourse_input["source"]["repository_url"].split("/")

host = remote[2]
api_base_url = "https://" + ("api.github.com" if host == "github.com" else host + "/api/v3")
owner = remote[3]
repo = remote[4].split(" ")[0]
head_sha = concourse_input["source"]["commit"]

log_url = (
    getenv("ATC_EXTERNAL_URL")  # type: ignore
    + "/teams/"
    + getenv("BUILD_TEAM_NAME")
    + "/pipelines/"
    + getenv("BUILD_PIPELINE_NAME")
    + "/jobs/"
    + getenv("BUILD_JOB_NAME")
    + "/builds/"
    + getenv("BUILD_NAME")
)

state_file_path = path.join(input_directory, concourse_input["source"]["resource_name"], "state.json")

token = concourse_input["source"]["token"]
concourse_username = getenv("BUILD_CREATED_BY")

if "github_user_tokens" in concourse_input["source"] and concourse_username is not None:
    assert concourse_username in concourse_input["source"]["github_user_tokens"]
    token = concourse_input["source"]["github_user_tokens"][concourse_username]

headers = {
    "Authorization": "Bearer " + token,
    "User-Agent": "concourse-github-check-resource",
    "Accept": "application/vnd.github.antiope-preview+json,application/vnd.github.ant-man-preview+json,application/vnd.github.flash-preview+json",  # noqa: E501  # pylint: disable=C0301
}

if path.exists(state_file_path):
    assert len(listdir(input_directory)) == 1

    assert path.isfile(state_file_path)

    with open(file=state_file_path, mode="r", encoding="utf-8") as state_file:
        state = load(state_file)

    assert isinstance(state, dict)
    assert isinstance(state["id"], str)

    deployment_id = state["id"]

    data = {"state": concourse_input["params"]["state"], "log_url": log_url}

    if "environment_urls" in concourse_input["source"]:
        environment_urls = concourse_input["source"]["environment_urls"]
        response = get(
            f"{api_base_url}/repos/{owner}/{repo}/deployments/{deployment_id}",
            headers=headers,
        )
        assert (
            response.status_code == 200
        ), f"Got unexpected response code {response.status_code} from GitHub: {response.json()}"
        environment = response.json()["environment"]
        if environment in environment_urls:
            data["environment_url"] = environment_urls[environment]

    response = post(
        f"{api_base_url}/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", json=data, headers=headers
    )
    assert (
        response.status_code == 201
    ), f"Got unexpected response code {response.status_code} from GitHub: {response.json()}"

    url = response.json()["url"]

    print(
        dumps(
            {
                "version": {"id": deployment_id},
                "metadata": [
                    {"name": "url", "value": url},
                ],
            }
        )
    )
else:
    assert len(listdir(input_directory)) == 0

    params = concourse_input["params"]

    assert "environment" in params, "`environment` required in `params` to create a new deployment"

    environment = params["environment"]

    data = {
        "ref": head_sha,
        "environment": environment,
    }

    response = post(f"{api_base_url}/repos/{owner}/{repo}/deployments", json=data, headers=headers)
    assert (
        response.status_code == 201
    ), f"Got unexpected response code {response.status_code} from GitHub: {response.json()}"

    json = response.json()

    deployment_id = json["id"]
    url = json["url"]

    print(
        dumps(
            {
                "version": {"id": str(deployment_id)},
                "metadata": [
                    {"name": "url", "value": url},
                ],
            }
        )
    )
